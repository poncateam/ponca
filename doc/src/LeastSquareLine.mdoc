Detailed Description

template<class DataPoint, class _WFunctor, typename T>
class Ponca::LeastSquareLine< DataPoint, _WFunctor, T >

Orthogonal Regression is the process of finding the line that best fits a set of points by minimizing their squared orthogonal distances to it.
The first key insight is that the orthogonal regression line will always pass through the average (or centroid) of the points.
The centroid can be computed by adding the points together, and then dividing by the number of points.
Note
Now that we have a point that the line passes through, we just need to calculate its direction.

Since this algorithm is iterative, we need an iteration function that gets us closer to the true line direction at each step.

We can choose almost any** direction to start, and we will iteratively work toward the real direction.

The key to calculating the next direction estimate is to multiply each point by the dot product of it and the current estimate.
This moves all the points to the same hemisphere as the current guess, allowing you to simply sum them and normalize them for the new direction estimate.

Warning
This class is valid only in 3D.

Public Types
typedef Base::Scalar 	Scalar
 	Inherited scalar type.
 
typedef Base::VectorType 	VectorType
 	Inherited vector type.
 
typedef DataPoint::MatrixType 	MatrixType
 	Matrix type inherited from DataPoint.
 
typedef _WFunctor 	WFunctor
 	Weight Function.
     
typedef Eigen::SelfAdjointEigenSolver< MatrixType > 	Solver
    Solver used to analyse the covariance matrix.

typedef Eigen::Matrix< Scalar, 2, 1 > 	Vector2
 
typedef Eigen::Matrix< Scalar, Eigen::Dynamic, 1 > 	VectorX
 
typedef Eigen::Matrix< Scalar, Eigen::Dynamic, Eigen::Dynamic > 	MatrixX

 
Public Member Functions

LeastSquareLine< DataPoint, WFunctor, T > & 	leastSquareLine ()
 	Explicit conversion to LeastSquareLine, to access methods potentially hidden by inheritage.
 
void 	init (const VectorType &_evalPos)
 	Set the evaluation position and reset the internal states. More...
 
bool 	addNeighbor (const DataPoint &_nei)
 	Add a neighbor to perform the fit. More...
 
FIT_RESULT 	finalize ()
 	Finalize the fitting procedure. More...
     
Solver   solver() const { return m_solver }
    Reading access to the Solver used to analyse the covariance matrix
 
 
 
Protected Types
enum  	{ Check = Base::PROVIDES_LINE}
 

Protected Attributes
Scalar 	m_sum
 	number of total queries.
 
VectorType 	m_cog
 	Gravity center of the neighborhood.
 
MatrixType 	m_cov
 	Covariance matrix.
 
Solver 	m_solver
 	Solver used to analyse the covariance matrix.
 
WFunctor 	m_w
 	Weight function (must inherits BaseWeightFunc)
 

Member Function Documentation
◆ addNeighbor()
template<class DataPoint , class _WFunctor , typename T >
bool LeastSquareLine::addNeighbor	(	const DataPoint & 	_nei	)	
inline
Add a neighbor to perform the fit.

Returns
false if param nei is not a valid neighbour (weight = 0)


◆ finalize()
template<class DataPoint , class _WFunctor , typename T >
FIT_RESULT LeastSquareLine::finalize	(		)	
inline
Finalize the fitting procedure.

Returns
the corresponding state of the fitting
Warning
Must be called be for any use of the fitting output


◆ init()
template<class DataPoint , class _WFunctor , typename T >
void LeastSquareLine::init	(	const VectorType & 	_evalPos	)	
inline
Set the evaluation position and reset the internal states.

Warning
Must be called be for any computation


◆ setWeightFunc()
template<class DataPoint , class _WFunctor , typename T >
void Ponca::LeastSquareLine< DataPoint, _WFunctor, T >::setWeightFunc	(	const WFunctor & 	_w	)	
inline
Init the WeightFunc, without changing the other internal states.

Warning
Must be called be for any computation