namespace Ponca
{
/*!
  \page fitting Fitting Module: User Manual

  <center>[\ref user_manual_page "Go back to user manual"]</center>
  <center>[\ref fitting_concepts "Go to concept page"]</center>

  \tableofcontents

  \section fitting_intro Introduction

  The fitting module is dedicated to the smooth fitting of point clouds and extraction of useful geometric properties.
  Figure 1(a) shows a typical example in 2D: we reconstruct a potential function (shown in fake colors) from a few 2D points equipped with normals;
  then the 0-isoline of this potential gives us an implicit curve (in orange) from which we can readily extract further properties like curvature.
  A great benefit of this implicit technique \cite Guennebaud:2007:APSS is that it works in arbitrary dimensions: Figures 1(b-c) show how we reconstruct an implicit 3D surface with the same approach, starting from a 3D point cloud.
  Working with meshes then simply consists of only considering their vertices.

  \image html interpolation.png "Figure 1: (a) An implicit 2D curve fit to a 2D point cloud. (b) A 3D point cloud shown with splats. (c) An implicit 3D surface reconstructed from (b)."

  This is just the tip of the iceberg though, as we also provide methods for dealing with points equipped with non-oriented normals \cite Chen:2013:NOMG, techniques to analyze
  points clouds in scale-space to discover salient structures \cite Mellado:2012:GLS, methods to compute multi-scale principal curvatures \cite Mellado:2013:SSC and methods to compute surface variation using a plane instead of a sphere for the fitting \cite Pauly:2002:PSSimplification.



  \subsection fitting_design Design choices and programing techniques
  The goal of this module is to provide lightweight, fast and generic algorithms for 3d point cloud processing.
  We mostly focus on local regression techniques, which are core components of surface reconstruction techniques \cite Alexa:2001:Pss \cite Guennebaud:2007:APSS, geometric descriptors \cite Mellado:2012:GLS \cite Lejemble:2021:stable or shape analysis techniques \cite lejemble:2020:persistence.
  Most of these techniques share similar computation, and can be combined in several ways.
  For instance, \ref NormalDerivativesCurvatureEstimator estimates curvature values by analyzing the spatial derivatives of a normal field, and can be combined with any normal estimation technique.

  In order to ease the association of multiple computational components, the library is based on the Curiously Recurring Template Pattern (CRTP).
  In contrast with polymorphism, this method allows to combine multiple short computations without adding runtime overhead (both in terms of memory footprint and execution time).
  Instead, the combination of the computational components is performed and optimized when compiling the program, and thus require more memory and time for this stage.

  Because of some properties of the C++ language, our classes does not inherit from a `Base` interface defining the API, but rather follows concepts, as described in \subpage fitting_concepts.

  \subsection fitting_primitiveOverview Fitting primitives and compute neighborhood properties
  The fitting module provides a unified API to perform computations (e.g. fit a \ref PrimitiveBase "Primitive", compute geometrical properties such as \ref CurvatureEstimatorBase "Curvatures") over the neighborhood of a given point.
  The type of computation is controlled by a type (called `Fit` in the example below) defined by the user by combining computational components offered in this module.
  Given an object of type `Fit`, the client code will always looks as follows:
  \code
  Fit fit;                          // Create the user-defined fitting procedure
  fit.setWeightFunc(WeightFunc(t)); // Set a weighting function to weight neighbors
  fit.init(p);                      // Set the evaluation position
  for(auto& it = vecs.begin(); it != vecs.end(); it++)
    fit.addNeighbor(*it);           // Traverse neighborhood
  fit.finalize();                   // Finalize computations
  \endcode

  Once computations are done, the `Fit` object provides both getters to the neighborhood properties (e.g. estimated curvature), and procedures (e.g. projection operator onto the fitted primitive):
  \code
  cout << "Estimated mean curvature: " << fit.kMean()        << "\n"
       << "The initial point " << p.transpose()              << "\n"
       << "Is projected at   " << fit.project(p).transpose() << endl;
  \endcode

  The \ref spatialpartitioning "Spatial Partitioning" module provides data-structures to collect neighborhood in point clouds.

  \subsection fitting_availableFunctionalities Fitting techniques overview
  We provide various approaches to approximate, analyze or characterize the geometric properties of local neighborhoods.
  In most situations, all these tools are based on the estimation of a geometric \ref PrimitiveBase "Primitive" approximating the neighborhood, on top of which we provide more advanced computations.
  The table below summarizes the \ref PrimitiveBase "Primitives" available in the library, as well as the associated fitting techniques:

  Primitive         | Required Input      | Fitting techniques                                    |
  ----------------- | ------------------- | ----------------------------------------------------- |
  Barycenter        | Points only         | MeanPosition (nD)                                     |
  Normal Vector     | Oriented points     | MeanNormal (nD, co-dimension 1)                       |
  Covariance Matrix | Points only         | CovarianceFitBase (nD)                                |
  Line              | Points only         | CovarianceLineFitImpl (nD)                            |
  Plane             | Points only         | CovariancePlaneFitImpl (nD)                           |
  Plane             | Oriented points     | MeanPlaneFitImpl (nD, co-dimension 1)                 |
  MongePatch        | Points only         | MongePatch (3D)                                       |
  AlgebraicSphere   | Points only         | SphereFitImpl (nD) \cite Guennebaud:2007:APSS         |
  AlgebraicSphere   | Oriented points     | OrientedSphereFitImpl (nD) \cite Guennebaud:2007:APSS |
  AlgebraicSphere   | Non-oriented points | UnorientedSphereFitImpl (nD) \cite Chen:2013:NOMG     |

  See section \ref fitting_extensions_deps for more details on how these primitives can be extended for more advanced computation.

  \subsection fitting_dicStructure Structure of the documentation
  In the following, we focus on a basic use of the module, and detail how to:
   - set up data samples that interface with an external code (see Section \ref fitting_datas),
   - assemble the computational objects to define a fitting object (see Section \ref fitting_Define)
   - run the fitting process in itself (see Section \ref fitting_Fitting),
   - and finally collect outputs (see Section \ref fitting_outputs).

  We also show detail all the available tools for geometrical property estimation (see Section \ref fitting_extensions_deps),
  with a specific focus on curvature (see Section \ref fitting_cuvature).
  The last section details how to use this module on CUDA kernels (see Section \ref fitting_cuda).

  \section fitting_firstSteps First Steps
  \subsection fitting_codeStructure Include directives
  The Fitting module defines operators that rely on no data structure and work both with CUDA and C++.
  These core operators implement atomic scientific contributions that are agnostic of the host application.
  If you want to use the Fitting module, just include its header:
  \code
#include "Ponca/Fitting"
  \endcode

  \subsection fitting_datas Data Samples

  The first step needed to use Ponca is to define how samples are represented inside the module.
  A strength of Ponca is to define all these structures at compile time to generate optimized code for fast evaluation at runtime.

  The class Ponca::Concept::PointConcept defines the interface that has to be implemented to represent a sample.
  Observe that there is no need for data conversion: all you need to do is to indicate how to access existing data (see the example \ref example_cxx_binding_page).

  As an example, let's fit a AlgebraicSphere onto points equipped with normals using Ponca::OrientedSphereFit.
  To this end, we must define a structure (denoted `PointPositionNormal` in the example below) containing a normal vector and its associated accessors.
  Depending on the fitting procedure we will use, we may need to define a `MatrixType` type.
  This is for instance required for \ref fitting_cuvature.
  This leads to the following class:
  \snippet testUtils.h PointPositionNormal
  \note The macro `PONCA_MULTIARCH` is optional and required only for \ref fitting_cuda support.

  `PointPositionNormal` needs to be specialized for any scalar type or dimension (you may also use a non-template class directly):
  \snippet basket.cpp SpecializedPointType

  \subsection fitting_Define Definition of the Fitting object

  Two template classes must be specialized to configure computations.

  1. The first step consists in specifying a weighting function: it defines how neighbor samples will contribute to the fit, as illustrated in Figure 2(a) in 2D.
  In this example, we choose a weight based on the Euclidean distance using Ponca::DistWeightFunc, remapped through a bisquare kernel defined in Ponca::SmoothWeightKernel:
  \snippet basket.cpp WeightFunction

  2. The second step identifies a complete fitting procedure through the specialization of a Ponca::Basket.
  In our example, we want to apply an Ponca::OrientedSphereFit to input data points, which outputs an Ponca::AlgebraicSphere by default.
  This leads to the following specialization:
  \snippet basket.cpp FitType

  \subsection fitting_Fitting Fitting Process

  At this point, most of the hard job has already been performed.
  All we have to do now is to provide an instance of the weight function, where \f$t\f$ refers to the neighborhood size, and initiate the fit at an arbitrary position \f$\mathbf{p}\f$.
  \snippet basket.cpp Fit Manual Traversal

  Then neighbors are added sequentially: in this example, we traverse a simple array, and samples outside of the neighborhood are automatically ignored by the weighting function.
  Once all neighbors have been incorporated, the fit is performed and results stored in the specialized Basket object.
  STL-like iterators can be used directly for the fit by calling
  \snippet basket.cpp Fit Compute

  Spatial structures can be used to accelerate spatial queries. Consider for instance using the KdTree class with range queries:
  \snippet basket.cpp Fit computeWithIds
  \note Currently, users need to ensure consistency between the query and the fit location/scale. This is expected to be fixed in the upcoming releases.

  In these examples, `fit1`, `fit2` and `fit3` should perform exactly the same computations, as long a the neighborhood remains the same between the three calls.


  \subsection fitting_Checkstatus Check fitting status
  After calling `finalize` or `compute`, it is recommended to test the return state of the `Fit` object before using it:

  \code
  FIT_RESULT eResult = fit.compute(vecs.begin(), vecs.end()); // or eResult = fit.finalize();
  if(eResult == STABLE)                                       // or fit.isStable()
        //do your things...
  \endcode

  Some methods require multiple fitting passes, e.g. \ref MongePatch.
  This is directly handled by the `compute` method.
  If you don't use it, you need to check if `eResults == NEED_ANOTHER_PASS` and repeat the `addNeighbor()`/`finalize()` steps.
  Don't forget to call `startNewPass()` at each iteration.

  \warning You should avoid data of low magnitude (i.e., 1 should be a significant value) to get good results; thus rescaling might be necessary.

  \subsection fitting_outputs  Basic Outputs

  \image html gls.png "Figure 2. (a) Fitting a 2D point cloud of positions and normals at a point p (in red) requires to define a weight function of size t (in green). (b) This results in an implicit scalar field (in fake colors), from which parameters of a local spherical surface can be extracted: an offset tau, a normal eta and a curvature kappa."


  Now that you have performed fitting, you may use its outputs in a number of ways (see Figure 2(b) for an illustration in 2D).


  You may directly access generic properties of the fitted \ref PrimitiveBase "Primitive":
  \code
  cout << "Value of the scalar field at the initial point: " << p.transpose()
       << " is equal to " << fit.potential(p) << endl;
  cout << "Its gradient is equal to: " << fit.primitiveGradient(p).transpose() << endl;
  \endcode
  This generates the following output:
  \code
  Value of the scalar field at the initial point: 0 0 0 is equal to -0.501162
  Its gradient is equal to:   0.00016028  0.000178782 -0.000384989
  \endcode


  You may rather access properties of the fitted sphere (the 0-isosurface of the fitted scalar field), as defined in AlgebraicSphere :
  \code
  cout << "Center: [" << fit.center().transpose() << "] ;  radius: " << fit.radius() << endl;
  cout << "The initial point " << p.transpose()              << endl
       << "Is projected at   " << fit.project(p).transpose() << endl;
  \endcode
  You will obtain:
  \code
  Center: [-0.000160652 -0.000179197  0.000385884] ;  radius: 1.00232
  The initial point 0 0 0
  Is projected at    0.353911  0.394765 -0.850088
  \endcode

  \section fitting_advanced Advanced usage

  \subsection fitting_derivatives Computing derivatives
  Starting from v1.0, Ponca provides BasketDiff, a class to extend an existing Basket with differentiation tools.
  Given a specialized type `TestPlane` that performs covariance plane fitting (using Ponca::CovariancePlaneFit), and defined as follows:
  \snippet basket.cpp PlaneFitType
  BasketDiff allows to extend this type to compute its derivatives in space and/or scale:
  \snippet basket.cpp PlaneFitDerTypes




  \subsection fitting_extensions_deps Computational objects, basket and CRTP
  In addition to Primitive fitting, Ponca allows to compute geometrical properties of the input samples.
  This is done by aggregating multiple tool classes in the Basket, for instance to compute the Growing Least Squares
  descriptor \cite Mellado:2012:GLS (see GLSParam) from multiple sphere fitting techniques:
  \snippet gls_tau.cpp GLSFitTypes
  From a technical point of view, the Basket class combines its template parameters (here Ponca::OrientedSphereFit and GLSParam) following the CRTP rules, ie.
  to form an object of the type `GLSParam<Ponca::OrientedSphereFit<DataPoint, _WFunctor,T>>`, that aggregates the computations provided in each class of the hierarchy.

  In practice, Ponca uses these mechanisms under the hood in order to combine atomic computations and minimize code duplication.
  For instance, Ponca::OrientedSphereFit is defined as an assembly of several computations classes:
  \snippet{lineno} orientedSphereFit.h OrientedSphereFit Definition
  Here, the class MeanPosition computes the mean position of the input points. It is also used in Ponca::CovariancePlaneFit:
  \snippet{lineno} covariancePlaneFit.h CovariancePlaneFit Definition
  and Ponca::MeanPlaneFit, among others.
  \snippet{lineno} meanPlaneFit.h MeanPlaneFit Definition

  \subsection fitting_capabilities Computational objects capabilities and requirements
  Aggregating small computational objects allows to minimize code duplication, but also to easily combine different techniques.
  For instance, GLSDer can be used independently of the fitting technique, e.g. Ponca::OrientedSphereFit or Ponca::UnorientedSphereFit, as long as the fitted \ref PrimitiveBase "Primitive" is an AlgebraicSphere.

  In order to detect if the computational objects are correctly combined, Ponca provides a compile-time requirement/capability system:
  each computational objects check if the other classes of the CRTP provides the required computations.
  For instance, in the GLSParam class, we require and declare capabilities:
  \snippet{lineno} gls.h Requirements
  If no base class define `ALGEBRAIC_SPHERE`, this line generates an error when compiling the program.
  For instance, compiling the type
  \code
    typedef Basket<Point, WeightSmoothFunc, GLSParam> FitSmoothOriented;
  \endcode
  generates the following error:
  \code
    error: static assertion failed: Ponca capability 'ALGEBRAIC_SPHERE' not provided by any base class
  \endcode
  The capability `GLS_PARAMETRIZATION` tells that GLSParam provides the GLS parameterization \cite Mellado:2012:GLS, and other components can access the related information.

  The macro `IS_PROVIDED` check at compile-time if a capability is provided or not:
  \code
    if constexpr(IS_PROVIDED(GLS_PARAMETRIZATION)) {
      // use this->tau(), this->eta(), ...
    }
    std::conditional<IS_PROVIDED(GLS_PARAMETRIZATION), double, float>::type var;
  \endcode

  \note There is currently no formal description of the API provided by each capability. This will be fixed in upcoming releases.
  These relations are currently implicitly defined (and used), but not documented.
  For instance, a tool with the capability `PRINCIPAL_CURVATURES` provides the following methods:
  `kmin()`, `kmax()`, `kminDirection()`, `kmaxDirection()`, `kMean()`, `GaussianCurvature()`, see CurvatureEstimatorBase.

  In order to ease tools combinations, each class declare a set of *required* and *provided* capabilities, as listed in the two following table:

    Fit/Tool (used in Basket)                   | Requires                                                                                              | Provides                                                            |
    ------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------- |
    MeanPosition                                |                                                                                                       | `MEAN_POSITION`                                                     |
    MeanNormal                                  |                                                                                                       | `MEAN_NORMAL`                                                       |
    PrimitiveBase                               |                                                                                                       | `PRIMITIVE_BASE`                                                    |
    DryFit                                      | `PRIMITIVE_BASE`                                                                                      |                                                                     |
    Plane                                       | `PRIMITIVE_BASE`                                                                                      | `PLANE`                                                             |
    Ponca::MeanPlaneFitImpl                     | `MEAN_POSITION`,`MEAN_NORMAL`,`PLANE`                                                                 |                                                                     |
    CovarianceFitBase                           | `MEAN_POSITION`                                                                                       | `POSITION_COVARIANCE`                                               |
    Ponca::CovarianceLineFitImpl                | `LINE`,`POSITION_COVARIANCE`                                                                          |                                                                     |
    Ponca::CovariancePlaneFitImpl               | `PLANE`,`POSITION_COVARIANCE`                                                                         | `TANGENT_PLANE_BASIS`                                               |
    MongePatch                                  | `TANGENT_PLANE_BASIS`,`PLANE`                                                                         |                                                                     |
    AlgebraicSphere                             | `PRIMITIVE_BASE`                                                                                      | `ALGEBRAIC_SPHERE`                                                  |
    Ponca::SphereFitImpl                        | `ALGEBRAIC_SPHERE`                                                                                    |                                                                     |
    Ponca::OrientedSphereFitImpl                | `ALGEBRAIC_SPHERE`,`MEAN_NORMAL`,`MEAN_POSITION`                                                      |                                                                     |
    Ponca::UnorientedSphereFitImpl              | `ALGEBRAIC_SPHERE`,`MEAN_POSITION`                                                                    |                                                                     |
    GLSParam                                    | `ALGEBRAIC_SPHERE`                                                                                    | `GLS_PARAMETRIZATION`                                               |

    Fit/Tool (used in BasketDiff)               | Requires                                                                                              | Provides                                                            |
    ------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------- |
    PrimitiveDer                                | `PRIMITIVE_BASE`                                                                                      | `PRIMITIVE_DERIVATIVE`                                              |
    CovarianceFitDer                            | `PRIMITIVE_DERIVATIVE`,`MEAN_POSITION_DERIVATIVE`,`POSITION_COVARIANCE`                               | `POSITION_COVARIANCE_DERIVATIVE`                                    |
    Ponca::CovariancePlaneDerImpl               | `PLANE`,`POSITION_COVARIANCE_DERIVATIVE`                                                              | `COVARIANCE_PLANE_DERIVATIVE`,`NORMAL_DERIVATIVE`                   |
    Ponca::OrientedSphereDerImpl                | `ALGEBRAIC_SPHERE`,`MEAN_POSITION_DERIVATIVE`,`PRIMITIVE_DERIVATIVE`                                  | `ALGEBRAIC_SPHERE_DERIVATIVE`,`NORMAL_DERIVATIVE`                   |
    MlsSphereFitDer                             | `PRIMITIVE_DERIVATIVE`,`ALGEBRAIC_SPHERE_DERIVATIVE`                                                  | `NORMAL_DERIVATIVE`                                                 |
    GLSDer                                      | `GLS_PARAMETRIZATION`,`PRIMITIVE_DERIVATIVE`,`ALGEBRAIC_SPHERE_DERIVATIVE`                            | `GLS_DERIVATIVE`,`GLS_GEOM_VAR`                                     |
    CurvatureEstimatorBase                      |                                                                                                       | `PRINCIPAL_CURVATURES`                                              |
    NormalDerivativesCurvatureEstimator         | `NORMAL_DERIVATIVE`,`PRINCIPAL_CURVATURES`                                                            |                                                                     |
    NormalCovarianceCurvatureEstimator          | `PRINCIPAL_CURVATURES`                                                                                |                                                                     |
    ProjectedNormalCovarianceCurvatureEstimator | `PLANE`                                                                                               |                                                                     |

    \note In its current version, the requirement/capability system offer limited protection over the combination of tools providing the same capabilities.
    Indeed, it is possible to build ill-formed combinations where two computations attempt to save their results at the same place, e.g. when using two fitting technique for the same primitive:
    \snippet fit_plane.cpp Conflicting type
    This case is not detected at compile time, but rather dynamically when calling finalize(), which can now return CONFLICT_ERROR_FOUND.
    Internally, this is implemented by checking if the primitive is already valid (ie. it has been computed already) when finalizing the computation.
    This limitation is expected to be resolved in upcoming releases.

  \subsection fitting_multiprimitive Sharing computations between fits
  In most cases, only one primitive is included in the Basket, and it is recommended to use the helper classes provided by Ponca for fitting, e.g. Ponca::CovariancePlaneFitImpl, Ponca::OrientedSphereFitImpl.
  Starting from version 1.0.0, Ponca allows to combine multiple primitives.
  In order to share intermediate computation results, it is recommended to explicitly define the computational arrangement, e.g.:
  \snippet basket.cpp HybridType

  \subsection fitting_cuvature Computing Curvatures

  Ponca offers several ways to compute curvatures, some of which are reviewed and compared by Lejemble et al. in \cite Lejemble:2021:stable and listed in the table below:
  Estimator Name                                                 |   Estimated quantities   | Usage                                                                                                     |  Speed | Robustness  |
  -------------------------------------------------------------- | ------------------------ | --------------------------------------------------------------------------------------------------------- | ------ | ----------- |
  Distance to PCA plane \cite Digne:2011:scalespacemeshing       | Mean curvature           | `Basket<P,W,CovariancePlaneFit> // method potential()`                                                    |  +++   | -           |
  Surface Variation \cite Pauly:2002:PSSimplification            | Mean curvature           | `Basket<P,W,CovariancePlaneFit> // method surfaceVariation()`                                             |  +++   | -           |
  Growing Least Squares \cite Mellado:2012:GLS                   | Mean curvature           | `Basket<P,W,OrientedSphereFit,GLSParam> // method kappa()`                                                |  ++    | + +         |
  Point Set Surfaces (PSS) \cite Alexa:2001:Pss                  | Curvature Tensor         | `Basket<P,W,CovariancePlaneFit,CovariancePlaneSpaceDer,NormalDerivativesCurvatureEstimator>`              |  +++   | +           |
  Algebraic Point Set Surfaces (APSS) \cite Guennebaud:2007:APSS | Curvature Tensor         | `Basket<P,W,OrientedSphereFit,OrientedSphereSpaceDer,NormalDerivativesCurvatureEstimator>`                |  ++    | + +         |
  Algebraic Shape Operator (ASO) \cite Lejemble:2021:stable      | Curvature Tensor         | `Basket<P,W,OrientedSphereFit,OrientedSphereSpaceDer,MlsSphereFitDer,NormalDerivativesCurvatureEstimator>`|  +     | + + +       |


  \image html buste.png "Figure 3. Example of mean curvature (GLSParam::kappa) computed at a fine (left) and a coarse (right) scale, and rendered with a simple color map (orange for concavities, blue for convexities)."

  \subsection fitting_cuda Cuda
  Ponca can be used directly on GPU, thanks to several mechanisms:
   - Eigen Cuda capabilities, see <a href="http://eigen.tuxfamily.org/dox-devel/TopicCUDA.html"  target="_blank">Eigen documentation</a> for more details.
   You *need* to use a consistent `Eigen::Index` on both CPU and GPU if you plan to transfer memory between the computing units.
   That's why we recommend to set the following preprocessor variable when compiling your project:
   \code -DEIGEN_DEFAULT_DENSE_INDEX_TYPE=int\endcode
   You might also need to define the `--expt-relaxed-constexpr` preprocessor option for `NVCC`.
   Example of working cmake file (see \ref example_cu_ssc_page):
   \code
   enable_language(CUDA)
   add_executable(ponca_ssgls "ponca_ssgls.cu")
   target_compile_options(ponca_ssgls PRIVATE --expt-relaxed-constexpr)
   \endcode
   - Automatic CPU/GPU compilation qualifiers. We use the macro
  \code
          PONCA_MULTIARCH void function();
  \endcode
  to use the same code for C++ and CUDA. It has no effect when the code is compiled with GCC or Clang, but it will force the compilation for both host and device architectures when compiling with nvcc. A similar macro system is provided for mathematical functions, to switch between STL and CUDA versions.

  Check the \ref cu_ssgl_intro_sec "C++/Cuda" and \ref example_python_ssc_page "Python/Cuda" (using PyCuda) examples for more details and how-to.

  <hr>
  <center>[\ref fitting_concepts "Go to concept page"]</center>
  <center>[\ref user_manual_page "Go back to user manual"]</center>
 */
 }
